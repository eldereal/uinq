/* This file is auto generated by codegen project. Don't modify this file directly */
using System;
using System.Collections.Generic;
namespace Uniq
{
    public static partial class Uniq
    {
        public static Enumerable<Where<ArrayEach<T>, ArrayEach<T>.Enumerator, T>, Where<ArrayEach<T>, ArrayEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this T[] source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<ListEach<T>, ListEach<T>.Enumerator, T>, Where<ListEach<T>, ListEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this List<T> source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<HashSetEach<T>, HashSetEach<T>.Enumerator, T>, Where<HashSetEach<T>, HashSetEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this HashSet<T> source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T>, Where<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this LinkedList<T> source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<StackEach<T>, StackEach<T>.Enumerator, T>, Where<StackEach<T>, StackEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this Stack<T> source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<QueueEach<T>, QueueEach<T>.Enumerator, T>, Where<QueueEach<T>, QueueEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this Queue<T> source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>>, Where<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>>.Enumerator, KeyValuePair<TK,TV>> Where<TK,TV>(this Dictionary<TK,TV> source, Func<KeyValuePair<TK,TV>, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>>, Where<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>>.Enumerator, KeyValuePair<TK,TV>> Where<TK,TV>(this SortedDictionary<TK,TV> source, Func<KeyValuePair<TK,TV>, bool> predicate) { return source.Each().Where(predicate); }
        public static Enumerable<Where<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T>, Where<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T>.Enumerator, T> Where<T>(this IEnumerable<T> source, Func<T, bool> predicate) { return source.Each().Where(predicate); }
    }
}
