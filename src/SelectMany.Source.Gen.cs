/* This file is auto generated by codegen project. Don't modify this file directly */
/* SelectMany for system sources and Uniq mapper */
using System;
using System.Collections.Generic;
namespace Uniq
{
    public static partial class Uniq
    {
        public static Enumerable<SelectMany<ArrayEach<T>, ArrayEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<ArrayEach<T>, ArrayEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this T[] source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<ListEach<T>, ListEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<ListEach<T>, ListEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this List<T> source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<HashSetEach<T>, HashSetEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<HashSetEach<T>, HashSetEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this HashSet<T> source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this LinkedList<T> source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<StackEach<T>, StackEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<StackEach<T>, StackEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this Stack<T> source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<QueueEach<T>, QueueEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<QueueEach<T>, QueueEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this Queue<T> source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TSubEnumerable, TSubEnumerator, TR>, SelectMany<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<TK,TV, TSubEnumerable, TSubEnumerator, TR>(this Dictionary<TK,TV> source, Func<KeyValuePair<TK,TV>, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TSubEnumerable, TSubEnumerator, TR>, SelectMany<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<TK,TV, TSubEnumerable, TSubEnumerator, TR>(this SortedDictionary<TK,TV> source, Func<KeyValuePair<TK,TV>, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
        public static Enumerable<SelectMany<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>, SelectMany<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T, TSubEnumerable, TSubEnumerator, TR>.Enumerator, TR> SelectMany<T, TSubEnumerable, TSubEnumerator, TR>(this IEnumerable<T> source, Func<T, Enumerable<TSubEnumerable, TSubEnumerator, TR>> mapper) where TSubEnumerable : struct, IEnumerable<TSubEnumerator, TR> where TSubEnumerator : struct, IEnumerator<TR> { return source.Each().SelectMany(mapper); }
    }
}
