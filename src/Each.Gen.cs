/* This file is auto generated by codegen project. Don't modify this file directly */
using System;
using System.Collections.Generic;
namespace Uniq
{
    public static partial class Uniq
    {
        public static Enumerable<ArrayEach<T>, ArrayEach<T>.Enumerator, T> Each<T>(this T[] source){return new Enumerable<ArrayEach<T>, ArrayEach<T>.Enumerator, T>(new ArrayEach<T>(source));}
        public static Enumerable<ListEach<T>, ListEach<T>.Enumerator, T> Each<T>(this List<T> source){return new Enumerable<ListEach<T>, ListEach<T>.Enumerator, T>(new ListEach<T>(source));}
        public static Enumerable<HashSetEach<T>, HashSetEach<T>.Enumerator, T> Each<T>(this HashSet<T> source){return new Enumerable<HashSetEach<T>, HashSetEach<T>.Enumerator, T>(new HashSetEach<T>(source));}
        public static Enumerable<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T> Each<T>(this LinkedList<T> source){return new Enumerable<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T>(new LinkedListEach<T>(source));}
        public static Enumerable<StackEach<T>, StackEach<T>.Enumerator, T> Each<T>(this Stack<T> source){return new Enumerable<StackEach<T>, StackEach<T>.Enumerator, T>(new StackEach<T>(source));}
        public static Enumerable<QueueEach<T>, QueueEach<T>.Enumerator, T> Each<T>(this Queue<T> source){return new Enumerable<QueueEach<T>, QueueEach<T>.Enumerator, T>(new QueueEach<T>(source));}
        public static Enumerable<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>> Each<TK,TV>(this Dictionary<TK,TV> source){return new Enumerable<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>>(new DictionaryEach<TK,TV>(source));}
        public static Enumerable<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>> Each<TK,TV>(this SortedDictionary<TK,TV> source){return new Enumerable<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>>(new SortedDictionaryEach<TK,TV>(source));}
        public static Enumerable<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T> Each<T>(this IEnumerable<T> source){return new Enumerable<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T>(new EnumerableEach<T>(source));}
    }
}
