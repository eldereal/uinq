/* This file is auto generated by codegen project. Don't modify this file directly */
using System;
using System.Collections.Generic;
namespace Uniq
{
    public static partial class Uniq
    {
        public static Enumerable<Select<ArrayEach<T>, ArrayEach<T>.Enumerator, T, TR>, Select<ArrayEach<T>, ArrayEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this T[] source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<ListEach<T>, ListEach<T>.Enumerator, T, TR>, Select<ListEach<T>, ListEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this List<T> source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<HashSetEach<T>, HashSetEach<T>.Enumerator, T, TR>, Select<HashSetEach<T>, HashSetEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this HashSet<T> source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T, TR>, Select<LinkedListEach<T>, LinkedListEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this LinkedList<T> source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<StackEach<T>, StackEach<T>.Enumerator, T, TR>, Select<StackEach<T>, StackEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this Stack<T> source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<QueueEach<T>, QueueEach<T>.Enumerator, T, TR>, Select<QueueEach<T>, QueueEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this Queue<T> source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TR>, Select<DictionaryEach<TK,TV>, DictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TR>.Enumerator, TR> Select<TK,TV, TR>(this Dictionary<TK,TV> source, Func<KeyValuePair<TK,TV>, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TR>, Select<SortedDictionaryEach<TK,TV>, SortedDictionaryEach<TK,TV>.Enumerator, KeyValuePair<TK,TV>, TR>.Enumerator, TR> Select<TK,TV, TR>(this SortedDictionary<TK,TV> source, Func<KeyValuePair<TK,TV>, TR> mapFunc){ return source.Each().Select(mapFunc); }
        public static Enumerable<Select<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T, TR>, Select<EnumerableEach<T>, EnumerableEach<T>.Enumerator, T, TR>.Enumerator, TR> Select<T, TR>(this IEnumerable<T> source, Func<T, TR> mapFunc){ return source.Each().Select(mapFunc); }
    }
}
